import React, { useState, useEffect, useCallback } from 'react';
import { auth } from '../../utils/auth';
import './UserManagement.css';

const UserManagement = () => {
  // State management
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchFilters, setSearchFilters] = useState({
    name: '',
    email: '',
    role: ''
  });
  const [pagination, setPagination] = useState({
    page: 0,
    size: 10,
    totalPages: 0,
    totalElements: 0,
    orderBy: 'id',
    direction: 'asc'
  });

  // Modal states
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [editForm, setEditForm] = useState({
    fullName: '',
    email: '',
    dateOfBirth: '',
    phoneNumber: '',
    address: '',
    role: 'USER',
    isActive: true,
    isVerified: false
  });
  const [updating, setUpdating] = useState(false);

  // Fetch users with filters and pagination
  const fetchUsers = useCallback(async () => {
    setLoading(true);
    setError('');

    try {
      const token = auth.getAccessToken();
      if (!token) {
        setError('Authentication token not found');
        return;
      }

      // Build query parameters
      const params = new URLSearchParams({
        page: pagination.page.toString(),
        size: pagination.size.toString(),
        orderBy: pagination.orderBy,
        direction: pagination.direction
      });

      // Add search filters if they exist
      if (searchFilters.name.trim()) {
        params.append('name', searchFilters.name.trim());
      }
      if (searchFilters.email.trim()) {
        params.append('email', searchFilters.email.trim());
      }
      if (searchFilters.role.trim()) {
        params.append('role', searchFilters.role.trim());
      }

      const response = await fetch(`/api/user/get-all-users?${params}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        }
      });

      const data = await response.json();

      if (response.ok && data.status === 'success') {
        setUsers(data.data.content || []);
        setPagination(prev => ({
          ...prev,
          totalPages: data.data.totalPages || 0,
          totalElements: data.data.totalElements || 0
        }));
      } else {
        setError(data.message || 'Failed to fetch users');
      }
    } catch (error) {
      console.error('Error fetching users:', error);
      setError('Network error. Please check your connection.');
    } finally {
      setLoading(false);
    }
  }, [pagination.page, pagination.size, pagination.orderBy, pagination.direction, searchFilters]);

  // Initial fetch and when dependencies change
  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  // Handle search input changes
  const handleSearchChange = (field, value) => {
    setSearchFilters(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Handle search submit
  const handleSearch = () => {
    setPagination(prev => ({ ...prev, page: 0 }));
    fetchUsers();
  };

  // Clear all filters
  const clearFilters = () => {
    setSearchFilters({
      name: '',
      email: '',
      role: ''
    });
    setPagination(prev => ({ ...prev, page: 0 }));
  };

  // Handle pagination
  const handlePageChange = (newPage) => {
    setPagination(prev => ({ ...prev, page: newPage }));
  };

  // Handle sorting
  const handleSort = (field) => {
    setPagination(prev => ({
      ...prev,
      orderBy: field,
      direction: prev.orderBy === field && prev.direction === 'asc' ? 'desc' : 'asc',
      page: 0
    }));
  };

  // Format date
  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  // Get role badge class
  const getRoleBadgeClass = (role) => {
    switch (role) {
      case 'ADMIN':
        return 'role-badge admin';
      case 'USER':
        return 'role-badge user';
      default:
        return 'role-badge';
    }
  };

  // Get role display name
  const getRoleDisplayName = (role) => {
    switch (role) {
      case 'ADMIN':
        return 'Qu·∫£n tr·ªã vi√™n';
      case 'USER':
        return 'Ng∆∞·ªùi d√πng';
      default:
        return role;
    }
  };

  // Get status badge class
  const getStatusBadgeClass = (active, _verified) => {
    if (active && _verified) return 'status-badge active-verified';
    if (active && !_verified) return 'status-badge active-unverified';
    if (!active) return 'status-badge inactive';
    return 'status-badge';
  };

  // Get status display name
  const getStatusDisplayName = (active, _verified) => {
    if (active && _verified) return 'Ho·∫°t ƒë·ªông';
    if (active && !_verified) return 'Ch∆∞a x√°c th·ª±c';
    if (!active) return 'V√¥ hi·ªáu h√≥a';
    return 'Kh√¥ng x√°c ƒë·ªãnh';
  };

  // Handle edit user
  const handleEditUser = (user) => {
    setEditingUser(user);
    setEditForm({
      fullName: user.fullName || '',
      email: user.email || '',
      dateOfBirth: user.dateOfBirth || '',
      phoneNumber: user.phoneNumber || '',
      address: user.address || '',
      role: user.role || 'USER',
      isActive: user.active !== undefined ? user.active : true,
      isVerified: user._verified !== undefined ? user._verified : false
    });
    setShowEditModal(true);
  };

  // Handle edit form changes
  const handleEditFormChange = (field, value) => {
    setEditForm(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Update user API call
  const updateUser = async (userId, userData) => {
    try {
      const token = auth.getAccessToken();
      if (!token) {
        throw new Error('Authentication token not found');
      }

      const response = await fetch(`/api/user/${userId}/update`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData)
      });

      const data = await response.json();

      if (response.ok && data.status === 'success') {
        return data;
      } else {
        throw new Error(data.message || 'Failed to update user');
      }
    } catch (error) {
      console.error('Error updating user:', error);
      throw error;
    }
  };

  // Handle update user submit
  const handleUpdateUser = async () => {
    if (!editingUser) return;

    setUpdating(true);
    try {
      await updateUser(editingUser.id, editForm);
      
      // Refresh user list
      await fetchUsers();
      
      // Close modal
      setShowEditModal(false);
      setEditingUser(null);
      
      // Show success message (you can implement a toast notification here)
      alert('C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!');
    } catch (error) {
      alert(`L·ªói khi c·∫≠p nh·∫≠t: ${error.message}`);
    } finally {
      setUpdating(false);
    }
  };

  // Close edit modal
  const closeEditModal = () => {
    setShowEditModal(false);
    setEditingUser(null);
    setEditForm({
      fullName: '',
      email: '',
      dateOfBirth: '',
      phoneNumber: '',
      address: '',
      role: 'USER',
      isActive: true,
      isVerified: false
    });
  };

  return (
    <div className="user-management">
      {/* Header */}
      <section className="user-header">
        <div className="header-left">
          <h2>üë• Qu·∫£n L√Ω Ng∆∞·ªùi D√πng</h2>
          <p>Qu·∫£n l√Ω th√¥ng tin v√† quy·ªÅn h·∫°n ng∆∞·ªùi d√πng trong h·ªá th·ªëng</p>
        </div>
        <div className="header-right">
          <button className="btn btn-primary" onClick={fetchUsers}>
            üîÑ L√†m m·ªõi
          </button>
        </div>
      </section>

      {/* Search and Filters */}
      <section className="user-filters">
        <div className="search-grid">
          <div className="search-field">
            <label>T√¨m theo t√™n:</label>
            <input
              type="text"
              className="search-input"
              placeholder="Nh·∫≠p t√™n ng∆∞·ªùi d√πng..."
              value={searchFilters.name}
              onChange={(e) => handleSearchChange('name', e.target.value)}
            />
          </div>
          <div className="search-field">
            <label>T√¨m theo email:</label>
            <input
              type="email"
              className="search-input"
              placeholder="Nh·∫≠p email..."
              value={searchFilters.email}
              onChange={(e) => handleSearchChange('email', e.target.value)}
            />
          </div>
          <div className="search-field">
            <label>Vai tr√≤:</label>
            <select
              className="search-select"
              value={searchFilters.role}
              onChange={(e) => handleSearchChange('role', e.target.value)}
            >
              <option value="">T·∫•t c·∫£ vai tr√≤</option>
              <option value="ADMIN">Qu·∫£n tr·ªã vi√™n</option>
              <option value="USER">Ng∆∞·ªùi d√πng</option>
            </select>
          </div>
        </div>
        <div className="filter-actions">
          <button className="btn btn-primary" onClick={handleSearch}>
            üîç T√¨m ki·∫øm
          </button>
          <button className="btn btn-secondary" onClick={clearFilters}>
            üóëÔ∏è X√≥a b·ªô l·ªçc
          </button>
          <div className="total-count">
            T·ªïng: {pagination.totalElements} ng∆∞·ªùi d√πng
          </div>
        </div>
      </section>

      {/* Users Content */}
      <section className="users-content">
        {loading ? (
          <div className="loading-container">
            <div className="loading-spinner">ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...</div>
          </div>
        ) : error ? (
          <div className="error-container">
            <div className="error-message">
              <span className="error-icon">‚ùå</span>
              {error}
            </div>
          </div>
        ) : users.length === 0 ? (
          <div className="no-users">
            <div className="no-users-icon">üë•</div>
            <h3>Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng</h3>
            <p>Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm c·ªßa b·∫°n.</p>
            <button className="btn btn-primary" onClick={clearFilters}>
              X√≥a b·ªô l·ªçc
            </button>
          </div>
        ) : (
          <>
            {/* Users Table */}
            <div className="users-table">
              <table>
                <thead>
                  <tr>
                    <th onClick={() => handleSort('id')}>
                      ID
                      {pagination.orderBy === 'id' && (
                        <span>{pagination.direction === 'asc' ? ' ‚Üë' : ' ‚Üì'}</span>
                      )}
                    </th>
                    <th onClick={() => handleSort('email')}>
                      Email 
                      {pagination.orderBy === 'email' && (
                        <span>{pagination.direction === 'asc' ? ' ‚Üë' : ' ‚Üì'}</span>
                      )}
                    </th>
                    <th onClick={() => handleSort('fullName')}>
                      H·ªç v√† t√™n
                      {pagination.orderBy === 'fullName' && (
                        <span>{pagination.direction === 'asc' ? ' ‚Üë' : ' ‚Üì'}</span>
                      )}
                    </th>
                    <th>S·ªë ƒëi·ªán tho·∫°i</th>
                    <th>ƒê·ªãa ch·ªâ</th>
                    <th>Ng√†y sinh</th>
                    <th onClick={() => handleSort('role')}>
                      Vai tr√≤
                      {pagination.orderBy === 'role' && (
                        <span>{pagination.direction === 'asc' ? ' ‚Üë' : ' ‚Üì'}</span>
                      )}
                    </th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Thao t√°c</th>
                  </tr>
                </thead>
                <tbody>
                  {users.map((user, index) => (
                    <tr key={user.id || user.email || index}>
                      <td className="user-id">#{user.id}</td>
                      <td className="user-email">{user.email}</td>
                      <td className="user-name">{user.fullName || 'N/A'}</td>
                      <td className="user-phone">{user.phoneNumber || 'N/A'}</td>
                      <td className="user-address">{user.address || 'N/A'}</td>
                      <td className="user-birth">{formatDate(user.dateOfBirth)}</td>
                      <td>
                        <span className={getRoleBadgeClass(user.role)}>
                          {getRoleDisplayName(user.role)}
                        </span>
                      </td>
                      <td>
                        <span className={getStatusBadgeClass(user.active, user._verified)}>
                          {getStatusDisplayName(user.active, user._verified)}
                        </span>
                      </td>
                      <td>
                        <div className="action-buttons">
                          <button 
                            className="btn-edit"
                            title="Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng"
                            onClick={() => handleEditUser(user)}
                          >
                            ‚úèÔ∏è S·ª≠a
                          </button>
                          {user.active ? (
                            <button 
                              className="btn-disable"
                              title="V√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng"
                            >
                              üö´ V√¥ hi·ªáu h√≥a
                            </button>
                          ) : (
                            <button 
                              className="btn-enable"
                              title="K√≠ch ho·∫°t ng∆∞·ªùi d√πng"
                            >
                              ‚úÖ K√≠ch ho·∫°t
                            </button>
                          )}
                          <button 
                            className="btn-delete"
                            title="X√≥a ng∆∞·ªùi d√πng"
                          >
                            üóëÔ∏è X√≥a
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Pagination */}
            <div className="pagination">
              <button
                className={`pagination-btn ${pagination.page === 0 ? 'disabled' : ''}`}
                onClick={() => handlePageChange(pagination.page - 1)}
                disabled={pagination.page === 0}
              >
                ‚Üê Trang tr∆∞·ªõc
              </button>
              
              <div className="pagination-info">
                <span>Trang {pagination.page + 1} / {pagination.totalPages}</span>
                <span>Hi·ªÉn th·ªã {users.length} / {pagination.totalElements} ng∆∞·ªùi d√πng</span>
              </div>
              
              <button
                className={`pagination-btn ${pagination.page >= pagination.totalPages - 1 ? 'disabled' : ''}`}
                onClick={() => handlePageChange(pagination.page + 1)}
                disabled={pagination.page >= pagination.totalPages - 1}
              >
                Trang sau ‚Üí
              </button>
            </div>
          </>
        )}
      </section>

      {/* Edit User Modal */}
      {showEditModal && (
        <div className="modal-overlay">
          <div className="modal-content large-modal">
            <div className="modal-header">
              <h3>‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng</h3>
              <button className="close-btn" onClick={closeEditModal}>√ó</button>
            </div>
            <div className="modal-body">
              <div className="form-grid">
                <div className="form-group">
                  <label>H·ªç v√† t√™n:</label>
                  <input
                    type="text"
                    className="form-input"
                    value={editForm.fullName}
                    onChange={(e) => handleEditFormChange('fullName', e.target.value)}
                    placeholder="Nh·∫≠p h·ªç v√† t√™n..."
                  />
                </div>
                <div className="form-group">
                  <label>Email:</label>
                  <input
                    type="email"
                    className="form-input"
                    value={editForm.email}
                    onChange={(e) => handleEditFormChange('email', e.target.value)}
                    placeholder="Nh·∫≠p email..."
                  />
                </div>
                <div className="form-group">
                  <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                  <input
                    type="tel"
                    className="form-input"
                    value={editForm.phoneNumber}
                    onChange={(e) => handleEditFormChange('phoneNumber', e.target.value)}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i..."
                  />
                </div>
                <div className="form-group">
                  <label>Ng√†y sinh:</label>
                  <input
                    type="date"
                    className="form-input"
                    value={editForm.dateOfBirth}
                    onChange={(e) => handleEditFormChange('dateOfBirth', e.target.value)}
                  />
                </div>
                <div className="form-group full-width">
                  <label>ƒê·ªãa ch·ªâ:</label>
                  <input
                    type="text"
                    className="form-input"
                    value={editForm.address}
                    onChange={(e) => handleEditFormChange('address', e.target.value)}
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ..."
                  />
                </div>
                <div className="form-group">
                  <label>Vai tr√≤:</label>
                  <select
                    className="form-select"
                    value={editForm.role}
                    onChange={(e) => handleEditFormChange('role', e.target.value)}
                  >
                    <option value="USER">Ng∆∞·ªùi d√πng</option>
                    <option value="ADMIN">Qu·∫£n tr·ªã vi√™n</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Tr·∫°ng th√°i t√†i kho·∫£n:</label>
                  <div className="checkbox-group">
                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        checked={editForm.isActive}
                        onChange={(e) => handleEditFormChange('isActive', e.target.checked)}
                      />
                      T√†i kho·∫£n ho·∫°t ƒë·ªông
                    </label>
                    <label className="checkbox-label">
                      <input
                        type="checkbox"
                        checked={editForm.isVerified}
                        onChange={(e) => handleEditFormChange('isVerified', e.target.checked)}
                      />
                      ƒê√£ x√°c th·ª±c email
                    </label>
                  </div>
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button 
                className="btn btn-secondary" 
                onClick={closeEditModal}
                disabled={updating}
              >
                H·ªßy
              </button>
              <button 
                className="btn btn-primary" 
                onClick={handleUpdateUser}
                disabled={updating}
              >
                {updating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UserManagement;
